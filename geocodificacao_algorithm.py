# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Geocodificacao
                                 A QGIS plugin
 Este plugin automatiza a geocodificação de endereços dispostos em CSV e cria um shapefile deste pontos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-18
        copyright            : (C) 2024 by Operacao Ricardo Franco 2024
        email                : e.tadeu.eb@ime.eb.br; joao.pereira@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Cap Tadeu; 1° Ten Kreitlon'
__date__ = '2024-11-18'
__copyright__ = '(C) 2024 by Cap Tadeu; 1° Ten Kreitlon'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFile,
                       QgsProcessingOutputVectorLayer,
                       QgsVectorLayer,
                       QgsFields,
                       QgsField,
                       QgsGeometry,
                       QgsPointXY,
                       QgsProject,
                       QgsFeature,
                       QgsWkbTypes,
                       QgsCoordinateReferenceSystem)
import csv
import geocoder
import pandas as pd
from qgis.PyQt.QtCore import QVariant, QCoreApplication

import certifi
import os
os.environ['REQUESTS_CA_BUNDLE'] = certifi.where()

class GeocodificacaoAlgorithm(QgsProcessingAlgorithm):
    INPUT_CSV = 'INPUT_CSV'
    ADDRESS_FIELD = 'ADDRESS_FIELD'
    OUTPUT_LAYER = 'OUTPUT_LAYER'
    
    def initAlgorithm(self, config=None):
        # Parâmetro para o arquivo CSV
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT_CSV,
                'Arquivo CSV com endereços',
                extension='csv'
            )
        )
        # Parâmetro para a coluna que contém os endereços
        self.addParameter(
            QgsProcessingParameterField(
                self.ADDRESS_FIELD,
                'Coluna de endereços',
                parentLayerParameterName=self.INPUT_CSV,
                type=QgsProcessingParameterField.String
            )
        )
        # Saída como camada vetorial
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_LAYER,
                self.tr('Geocoded Points')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        # Obter o arquivo CSV de entrada
        input_csv = self.parameterAsFile(parameters, self.INPUT_CSV, context)
        address_field = self.parameterAsString(parameters, self.ADDRESS_FIELD, context)
        
        # Criar uma nova camada de saída de pontos
        crs = QgsCoordinateReferenceSystem("EPSG:4326")  # WGS 84
        output_layer = QgsVectorLayer(f"Point?crs={crs.authid()}", "Geocoded Points", "memory")
        output_layer_pr = output_layer.dataProvider()

        # Definir campos para a camada de saída
        fields = QgsFields()
        fields.append(QgsField("address", QVariant.String))
        fields.append(QgsField("latitude", QVariant.Double))
        fields.append(QgsField("longitude", QVariant.Double))
        output_layer_pr.addAttributes(fields)
        output_layer.updateFields()

        # Ler o arquivo CSV com pandas
        feedback.pushInfo("Carregando o arquivo CSV...")
        data = pd.read_csv(input_csv)
        feedback.pushInfo(f"A variável data é do tipo {type(data)}.") #O data é do tipo dataframe

        # Verificar se a coluna selecionada existe
        #if address_field not in data.columns:
        #    raise QgsProcessingException(f"A coluna '{address_field}' não foi encontrada no arquivo CSV.")

        # Processar cada endereço na coluna selecionada
        for index, row in data.iterrows():
            address = row[address_field]
            feedback.pushInfo(f"O input address é {address}.")
            if not isinstance(address, str) or not address.strip():
                feedback.pushInfo(f"Endereço vazio na linha {index + 1}, ignorado.")
                continue
            
            # Geocodificar o endereço
            location = geocoder.arcgis(address)
            if location and location.latlng:
                lat, lng = location.latlng
                feedback.pushInfo(f"\nO lat long do Endereço {address} é {lat}, {lng}.\n")
                # Criar uma nova feição de ponto
                feature = QgsFeature()
                feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lng, lat)))
                feature.setAttributes([address, lat, lng])
                output_layer_pr.addFeature(feature)
            else:
                feedback.pushInfo(f"Não foi possível geocodificar o endereço: {address}")

        # Atualizar a camada
        output_layer.updateExtents()
        QgsProject.instance().addMapLayer(output_layer)
        return {self.OUTPUT_LAYER: output_layer}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Geocodificacao'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return GeocodificacaoAlgorithm()
